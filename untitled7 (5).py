# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XRc3P7-MThYpxjnK7Iw9795FyKy-ePdm
"""

import pandas as pd

import pandas as pd

# Change the URL to point to the raw content of the CSV file on GitHub
# The raw URL is different from the URL displaying the file on GitHub
url = "https://raw.githubusercontent.com/Jujun8/sansan/main/data%20proyek.csv"
df = pd.read_csv(url)
df.head(1160)

!pip install streamlit

# prompt: berikan saya kode untuk menampilkan data tersebut pada streamlit

import pandas as pd
import streamlit as st

# Change the URL to point to the raw content of the CSV file on GitHub
# The raw URL is different from the URL displaying the file on GitHub
url = "https://raw.githubusercontent.com/Jujun8/sansan/main/data%20proyek.csv"
df = pd.read_csv(url)

st.title("Data Proyek")

# Display the dataframe in Streamlit
st.dataframe(df)

# You can also display a specific part of the dataframe if needed
# st.dataframe(df.head(1160))

# prompt: berikan saya kode untuk menghitung kelastering pada data yang saya berikan

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Select numerical columns for clustering (adjust columns based on your data)
numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns
df_numerical = df[numerical_cols].dropna() # Drop rows with missing values

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_numerical)

# Determine the optimal number of clusters using the Elbow Method
inertia = []
k_range = range(1, 11) # Test k from 1 to 10
for k in k_range:
  kmeans = KMeans(n_clusters=k, random_state=42, n_init=10) # Add n_init explicitly
  kmeans.fit(scaled_data)
  inertia.append(kmeans.inertia_)

# Plot the Elbow Method graph
plt.figure(figsize=(8, 6))
plt.plot(k_range, inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Inertia')
plt.xticks(k_range)
plt.grid(True)
plt.show()

# Based on the Elbow Method graph, choose an appropriate number of clusters (e.g., 3)
n_clusters = 3 # Replace with your chosen number of clusters

# Perform K-Means clustering
kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10) # Add n_init explicitly
df_numerical['Cluster'] = kmeans.fit_predict(scaled_data)

# Add the cluster labels back to the original dataframe (handle potential dropped rows)
# This assumes the order of rows in df_numerical matches the original df after dropping NaNs
# If you want to add clusters to the original df, you might need to merge or join
df = df.copy()
df['Cluster'] = -1 # Initialize with a default value
df.loc[df_numerical.index, 'Cluster'] = df_numerical['Cluster']


# Display the dataframe with cluster assignments in Streamlit (optional)
st.subheader("Data with Cluster Assignments")
st.dataframe(df)

# You can further analyze the clusters
# For example, look at the characteristics of each cluster
for cluster_id in range(n_clusters):
  st.subheader(f"Cluster {cluster_id}")
  st.dataframe(df[df['Cluster'] == cluster_id].describe())

df.info()